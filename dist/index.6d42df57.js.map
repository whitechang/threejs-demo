{"mappings":"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","sources":["src/assets/js/ThreeBSP.js"],"sourcesContent":["// Generated by CoffeeScript 1.6.3\n(function() {\n  var BACK, COPLANAR, EPSILON, FRONT, SPANNING, returning,\n    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },\n    __slice = [].slice,\n    __hasProp = {}.hasOwnProperty,\n    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };\n\n  EPSILON = 1e-5;\n\n  COPLANAR = 0;\n\n  FRONT = 1;\n\n  BACK = 2;\n\n  SPANNING = 3;\n\n  returning = function(value, fn) {\n    fn();\n    return value;\n  };\n\n  window.ThreeBSP = (function() {\n    function ThreeBSP(treeIsh, matrix) {\n      this.matrix = matrix;\n      this.intersect = __bind(this.intersect, this);\n      this.union = __bind(this.union, this);\n      this.subtract = __bind(this.subtract, this);\n      this.toGeometry = __bind(this.toGeometry, this);\n      this.toMesh = __bind(this.toMesh, this);\n      this.toTree = __bind(this.toTree, this);\n      if (this.matrix == null) {\n        this.matrix = new THREE.Matrix4();\n      }\n      this.tree = this.toTree(treeIsh);\n    }\n\n    ThreeBSP.prototype.toTree = function(treeIsh) {\n      var face, geometry, i, polygons, _fn, _i, _len, _ref,\n        _this = this;\n      if (treeIsh instanceof ThreeBSP.Node) {\n        return treeIsh;\n      }\n      polygons = [];\n      geometry = treeIsh instanceof THREE.Geometry ? treeIsh : treeIsh instanceof THREE.Mesh ? (treeIsh.updateMatrix(), this.matrix = treeIsh.matrix.clone(), treeIsh.geometry) : void 0;\n      _ref = geometry.faces;\n      _fn = function(face, i) {\n        var faceVertexUvs, idx, polygon, vIndex, vName, vertex, _j, _len1, _ref1, _ref2;\n        faceVertexUvs = (_ref1 = geometry.faceVertexUvs) != null ? _ref1[0][i] : void 0;\n        if (faceVertexUvs == null) {\n          faceVertexUvs = [new THREE.Vector2(), new THREE.Vector2(), new THREE.Vector2(), new THREE.Vector2()];\n        }\n        polygon = new ThreeBSP.Polygon();\n        _ref2 = ['a', 'b', 'c', 'd'];\n        for (vIndex = _j = 0, _len1 = _ref2.length; _j < _len1; vIndex = ++_j) {\n          vName = _ref2[vIndex];\n          if ((idx = face[vName]) != null) {\n            vertex = geometry.vertices[idx];\n            vertex = new ThreeBSP.Vertex(vertex.x, vertex.y, vertex.z, face.vertexNormals[0], new THREE.Vector2(faceVertexUvs[vIndex].x, faceVertexUvs[vIndex].y));\n            vertex.applyMatrix4(_this.matrix);\n            polygon.vertices.push(vertex);\n          }\n        }\n        return polygons.push(polygon.calculateProperties());\n      };\n      for (i = _i = 0, _len = _ref.length; _i < _len; i = ++_i) {\n        face = _ref[i];\n        _fn(face, i);\n      }\n      return new ThreeBSP.Node(polygons);\n    };\n\n    ThreeBSP.prototype.toMesh = function(material) {\n      var geometry, mesh,\n        _this = this;\n      if (material == null) {\n        material = new THREE.MeshNormalMaterial();\n      }\n      geometry = this.toGeometry();\n      return returning((mesh = new THREE.Mesh(geometry, material)), function() {\n        mesh.position.setFromMatrixPosition(_this.matrix);\n        return mesh.rotation.setFromRotationMatrix(_this.matrix);\n      });\n    };\n\n    ThreeBSP.prototype.toGeometry = function() {\n      var geometry, matrix,\n        _this = this;\n      matrix = new THREE.Matrix4().getInverse(this.matrix);\n      return returning((geometry = new THREE.Geometry()), function() {\n        var face, idx, polyVerts, polygon, v, vertUvs, verts, _i, _len, _ref, _results;\n        _ref = _this.tree.allPolygons();\n        _results = [];\n        for (_i = 0, _len = _ref.length; _i < _len; _i++) {\n          polygon = _ref[_i];\n          polyVerts = (function() {\n            var _j, _len1, _ref1, _results1;\n            _ref1 = polygon.vertices;\n            _results1 = [];\n            for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {\n              v = _ref1[_j];\n              _results1.push(v.clone().applyMatrix4(matrix));\n            }\n            return _results1;\n          })();\n          _results.push((function() {\n            var _j, _ref1, _results1;\n            _results1 = [];\n            for (idx = _j = 2, _ref1 = polyVerts.length; 2 <= _ref1 ? _j < _ref1 : _j > _ref1; idx = 2 <= _ref1 ? ++_j : --_j) {\n              verts = [polyVerts[0], polyVerts[idx - 1], polyVerts[idx]];\n              vertUvs = (function() {\n                var _k, _len1, _ref2, _ref3, _results2;\n                _results2 = [];\n                for (_k = 0, _len1 = verts.length; _k < _len1; _k++) {\n                  v = verts[_k];\n                  _results2.push(new THREE.Vector2((_ref2 = v.uv) != null ? _ref2.x : void 0, (_ref3 = v.uv) != null ? _ref3.y : void 0));\n                }\n                return _results2;\n              })();\n              face = (function(func, args, ctor) {\n                ctor.prototype = func.prototype;\n                var child = new ctor, result = func.apply(child, args);\n                return Object(result) === result ? result : child;\n              })(THREE.Face3, __slice.call((function() {\n                var _k, _len1, _results2;\n                _results2 = [];\n                for (_k = 0, _len1 = verts.length; _k < _len1; _k++) {\n                  v = verts[_k];\n                  _results2.push(geometry.vertices.push(v) - 1);\n                }\n                return _results2;\n              })()).concat([polygon.normal.clone()]), function(){});\n              geometry.faces.push(face);\n              _results1.push(geometry.faceVertexUvs[0].push(vertUvs));\n            }\n            return _results1;\n          })());\n        }\n        return _results;\n      });\n    };\n\n    ThreeBSP.prototype.subtract = function(other) {\n      var them, us, _ref;\n      _ref = [this.tree.clone(), other.tree.clone()], us = _ref[0], them = _ref[1];\n      us.invert().clipTo(them);\n      them.clipTo(us).invert().clipTo(us).invert();\n      return new ThreeBSP(us.build(them.allPolygons()).invert(), this.matrix);\n    };\n\n    ThreeBSP.prototype.union = function(other) {\n      var them, us, _ref;\n      _ref = [this.tree.clone(), other.tree.clone()], us = _ref[0], them = _ref[1];\n      us.clipTo(them);\n      them.clipTo(us).invert().clipTo(us).invert();\n      return new ThreeBSP(us.build(them.allPolygons()), this.matrix);\n    };\n\n    ThreeBSP.prototype.intersect = function(other) {\n      var them, us, _ref;\n      _ref = [this.tree.clone(), other.tree.clone()], us = _ref[0], them = _ref[1];\n      them.clipTo(us.invert()).invert().clipTo(us.clipTo(them));\n      return new ThreeBSP(us.build(them.allPolygons()).invert(), this.matrix);\n    };\n\n    return ThreeBSP;\n\n  })();\n\n  ThreeBSP.Vertex = (function(_super) {\n    __extends(Vertex, _super);\n\n    function Vertex(x, y, z, normal, uv) {\n      this.normal = normal != null ? normal : new THREE.Vector3();\n      this.uv = uv != null ? uv : new THREE.Vector2();\n      this.interpolate = __bind(this.interpolate, this);\n      this.lerp = __bind(this.lerp, this);\n      Vertex.__super__.constructor.call(this, x, y, z);\n    }\n\n    Vertex.prototype.clone = function() {\n      return new ThreeBSP.Vertex(this.x, this.y, this.z, this.normal.clone(), this.uv.clone());\n    };\n\n    Vertex.prototype.lerp = function(v, alpha) {\n      var _this = this;\n      return returning(Vertex.__super__.lerp.apply(this, arguments), function() {\n        _this.uv.add(v.uv.clone().sub(_this.uv).multiplyScalar(alpha));\n        return _this.normal.lerp(v, alpha);\n      });\n    };\n\n    Vertex.prototype.interpolate = function() {\n      var args, _ref;\n      args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];\n      return (_ref = this.clone()).lerp.apply(_ref, args);\n    };\n\n    return Vertex;\n\n  })(THREE.Vector3);\n\n  ThreeBSP.Polygon = (function() {\n    function Polygon(vertices, normal, w) {\n      this.vertices = vertices != null ? vertices : [];\n      this.normal = normal;\n      this.w = w;\n      this.subdivide = __bind(this.subdivide, this);\n      this.tessellate = __bind(this.tessellate, this);\n      this.classifySide = __bind(this.classifySide, this);\n      this.classifyVertex = __bind(this.classifyVertex, this);\n      this.invert = __bind(this.invert, this);\n      this.clone = __bind(this.clone, this);\n      this.calculateProperties = __bind(this.calculateProperties, this);\n      if (this.vertices.length) {\n        this.calculateProperties();\n      }\n    }\n\n    Polygon.prototype.calculateProperties = function() {\n      var _this = this;\n      return returning(this, function() {\n        var a, b, c, _ref;\n        _ref = _this.vertices, a = _ref[0], b = _ref[1], c = _ref[2];\n        _this.normal = b.clone().sub(a).cross(c.clone().sub(a)).normalize();\n        return _this.w = _this.normal.clone().dot(a);\n      });\n    };\n\n    Polygon.prototype.clone = function() {\n      var v;\n      return new ThreeBSP.Polygon((function() {\n        var _i, _len, _ref, _results;\n        _ref = this.vertices;\n        _results = [];\n        for (_i = 0, _len = _ref.length; _i < _len; _i++) {\n          v = _ref[_i];\n          _results.push(v.clone());\n        }\n        return _results;\n      }).call(this), this.normal.clone(), this.w);\n    };\n\n    Polygon.prototype.invert = function() {\n      var _this = this;\n      return returning(this, function() {\n        _this.normal.multiplyScalar(-1);\n        _this.w *= -1;\n        return _this.vertices.reverse();\n      });\n    };\n\n    Polygon.prototype.classifyVertex = function(vertex) {\n      var side;\n      side = this.normal.dot(vertex) - this.w;\n      switch (false) {\n        case !(side < -EPSILON):\n          return BACK;\n        case !(side > EPSILON):\n          return FRONT;\n        default:\n          return COPLANAR;\n      }\n    };\n\n    Polygon.prototype.classifySide = function(polygon) {\n      var back, front, tally, v, _i, _len, _ref, _ref1,\n        _this = this;\n      _ref = [0, 0], front = _ref[0], back = _ref[1];\n      tally = function(v) {\n        switch (_this.classifyVertex(v)) {\n          case FRONT:\n            return front += 1;\n          case BACK:\n            return back += 1;\n        }\n      };\n      _ref1 = polygon.vertices;\n      for (_i = 0, _len = _ref1.length; _i < _len; _i++) {\n        v = _ref1[_i];\n        tally(v);\n      }\n      if (front > 0 && back === 0) {\n        return FRONT;\n      }\n      if (front === 0 && back > 0) {\n        return BACK;\n      }\n      if ((front === back && back === 0)) {\n        return COPLANAR;\n      }\n      return SPANNING;\n    };\n\n    Polygon.prototype.tessellate = function(poly) {\n      var b, count, f, i, j, polys, t, ti, tj, v, vi, vj, _i, _len, _ref, _ref1, _ref2,\n        _this = this;\n      _ref = {\n        f: [],\n        b: [],\n        count: poly.vertices.length\n      }, f = _ref.f, b = _ref.b, count = _ref.count;\n      if (this.classifySide(poly) !== SPANNING) {\n        return [poly];\n      }\n      _ref1 = poly.vertices;\n      for (i = _i = 0, _len = _ref1.length; _i < _len; i = ++_i) {\n        vi = _ref1[i];\n        vj = poly.vertices[(j = (i + 1) % count)];\n        _ref2 = (function() {\n          var _j, _len1, _ref2, _results;\n          _ref2 = [vi, vj];\n          _results = [];\n          for (_j = 0, _len1 = _ref2.length; _j < _len1; _j++) {\n            v = _ref2[_j];\n            _results.push(this.classifyVertex(v));\n          }\n          return _results;\n        }).call(this), ti = _ref2[0], tj = _ref2[1];\n        if (ti !== BACK) {\n          f.push(vi);\n        }\n        if (ti !== FRONT) {\n          b.push(vi);\n        }\n        if ((ti | tj) === SPANNING) {\n          t = (this.w - this.normal.dot(vi)) / this.normal.dot(vj.clone().sub(vi));\n          v = vi.interpolate(vj, t);\n          f.push(v);\n          b.push(v);\n        }\n      }\n      return returning((polys = []), function() {\n        if (f.length >= 3) {\n          polys.push(new ThreeBSP.Polygon(f));\n        }\n        if (b.length >= 3) {\n          return polys.push(new ThreeBSP.Polygon(b));\n        }\n      });\n    };\n\n    Polygon.prototype.subdivide = function(polygon, coplanar_front, coplanar_back, front, back) {\n      var poly, side, _i, _len, _ref, _results;\n      _ref = this.tessellate(polygon);\n      _results = [];\n      for (_i = 0, _len = _ref.length; _i < _len; _i++) {\n        poly = _ref[_i];\n        side = this.classifySide(poly);\n        switch (side) {\n          case FRONT:\n            _results.push(front.push(poly));\n            break;\n          case BACK:\n            _results.push(back.push(poly));\n            break;\n          case COPLANAR:\n            if (this.normal.dot(poly.normal) > 0) {\n              _results.push(coplanar_front.push(poly));\n            } else {\n              _results.push(coplanar_back.push(poly));\n            }\n            break;\n          default:\n            throw new Error(\"BUG: Polygon of classification \" + side + \" in subdivision\");\n        }\n      }\n      return _results;\n    };\n\n    return Polygon;\n\n  })();\n\n  ThreeBSP.Node = (function() {\n    Node.prototype.clone = function() {\n      var node,\n        _this = this;\n      return returning((node = new ThreeBSP.Node()), function() {\n        var p, _ref, _ref1, _ref2;\n        node.divider = (_ref = _this.divider) != null ? _ref.clone() : void 0;\n        node.polygons = (function() {\n          var _i, _len, _ref1, _results;\n          _ref1 = this.polygons;\n          _results = [];\n          for (_i = 0, _len = _ref1.length; _i < _len; _i++) {\n            p = _ref1[_i];\n            _results.push(p.clone());\n          }\n          return _results;\n        }).call(_this);\n        node.front = (_ref1 = _this.front) != null ? _ref1.clone() : void 0;\n        return node.back = (_ref2 = _this.back) != null ? _ref2.clone() : void 0;\n      });\n    };\n\n    function Node(polygons) {\n      this.clipTo = __bind(this.clipTo, this);\n      this.clipPolygons = __bind(this.clipPolygons, this);\n      this.invert = __bind(this.invert, this);\n      this.allPolygons = __bind(this.allPolygons, this);\n      this.isConvex = __bind(this.isConvex, this);\n      this.build = __bind(this.build, this);\n      this.clone = __bind(this.clone, this);\n      this.polygons = [];\n      if ((polygons != null) && polygons.length) {\n        this.build(polygons);\n      }\n    }\n\n    Node.prototype.build = function(polygons) {\n      var _this = this;\n      return returning(this, function() {\n        var poly, polys, side, sides, _i, _len, _results;\n        sides = {\n          front: [],\n          back: []\n        };\n        if (_this.divider == null) {\n          _this.divider = polygons[0].clone();\n        }\n        for (_i = 0, _len = polygons.length; _i < _len; _i++) {\n          poly = polygons[_i];\n          _this.divider.subdivide(poly, _this.polygons, _this.polygons, sides.front, sides.back);\n        }\n        _results = [];\n        for (side in sides) {\n          if (!__hasProp.call(sides, side)) continue;\n          polys = sides[side];\n          if (polys.length) {\n            if (_this[side] == null) {\n              _this[side] = new ThreeBSP.Node();\n            }\n            _results.push(_this[side].build(polys));\n          } else {\n            _results.push(void 0);\n          }\n        }\n        return _results;\n      });\n    };\n\n    Node.prototype.isConvex = function(polys) {\n      var inner, outer, _i, _j, _len, _len1;\n      for (_i = 0, _len = polys.length; _i < _len; _i++) {\n        inner = polys[_i];\n        for (_j = 0, _len1 = polys.length; _j < _len1; _j++) {\n          outer = polys[_j];\n          if (inner !== outer && outer.classifySide(inner) !== BACK) {\n            return false;\n          }\n        }\n      }\n      return true;\n    };\n\n    Node.prototype.allPolygons = function() {\n      var _ref, _ref1;\n      return this.polygons.slice().concat(((_ref1 = this.front) != null ? _ref1.allPolygons() : void 0) || []).concat(((_ref = this.back) != null ? _ref.allPolygons() : void 0) || []);\n    };\n\n    Node.prototype.invert = function() {\n      var _this = this;\n      return returning(this, function() {\n        var flipper, poly, _i, _j, _len, _len1, _ref, _ref1, _ref2;\n        _ref = _this.polygons;\n        for (_i = 0, _len = _ref.length; _i < _len; _i++) {\n          poly = _ref[_i];\n          poly.invert();\n        }\n        _ref1 = [_this.divider, _this.front, _this.back];\n        for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {\n          flipper = _ref1[_j];\n          if (flipper != null) {\n            flipper.invert();\n          }\n        }\n        return _ref2 = [_this.back, _this.front], _this.front = _ref2[0], _this.back = _ref2[1], _ref2;\n      });\n    };\n\n    Node.prototype.clipPolygons = function(polygons) {\n      var back, front, poly, _i, _len;\n      if (!this.divider) {\n        return polygons.slice();\n      }\n      front = [];\n      back = [];\n      for (_i = 0, _len = polygons.length; _i < _len; _i++) {\n        poly = polygons[_i];\n        this.divider.subdivide(poly, front, back, front, back);\n      }\n      if (this.front) {\n        front = this.front.clipPolygons(front);\n      }\n      if (this.back) {\n        back = this.back.clipPolygons(back);\n      }\n      return front.concat(this.back ? back : []);\n    };\n\n    Node.prototype.clipTo = function(node) {\n      var _this = this;\n      return returning(this, function() {\n        var _ref, _ref1;\n        _this.polygons = node.clipPolygons(_this.polygons);\n        if ((_ref = _this.front) != null) {\n          _ref.clipTo(node);\n        }\n        return (_ref1 = _this.back) != null ? _ref1.clipTo(node) : void 0;\n      });\n    };\n\n    return Node;\n\n  })();\n\n}).call(this);\n"],"names":[],"version":3,"file":"index.6d42df57.js.map","sourceRoot":"/__parcel_source_root/"}